---
- hosts: all
  become: yes
  force_handlers: true
  tasks:

    - name: classify hosts based on distro
      group_by:
        key: os_family_{{ansible_facts['os_family']}}
      changed_when: False

    - include_tasks: "{{ ansible_facts['distribution'] }}-{{ ansible_facts['distribution_major_version'] }}.yml"

    - name: enable gssapi-keyex
      lineinfile:
        path: /etc/ssh/sshd_config
        line: GSSAPIKeyExchange yes
        regexp: (?i)^\s*GSSAPIKeyExchange\b
      notify: reload ssh

    - name: enable fstrim
      systemd:
        name: fstrim.timer
        state: started
        enabled: yes

    - name: install sssd-tools
      package:
        name: sssd-tools
        state: present

    - name: configure sssd debug_level
      ini_file:
        path: /etc/sssd/sssd.conf
        section: '{{item}}'
        option: debug_level
        value: '2'
      notify: restart sssd
      loop:
        - domain/ipa.robots.org.uk
        - sssd
        - nss
        - pam
        - sudo

    - name: recon pam_libdir
      shell:
        cmd: /sbin/ldconfig -p | awk '$1 == "libpam.so.0" { print $4 }' | sed 's/libpam\.so\.0$/security/'
      register: pam_libdir
      check_mode: False
      changed_when: False
      failed_when: pam_libdir.stdout == ""

    - name: recon pam_sss_gss.so existence
      stat:
        path: '{{ pam_libdir.stdout }}/pam_sss_gss.so'
      register: pam_sss_gss_stat

    - name: configure allowed services for pam_sss_gss.so
      ini_file:
        path: /etc/sssd/sssd.conf
        section: pam
        option: pam_gssapi_services
        value: sudo
      notify: restart sssd
      when: pam_sss_gss_stat.stat.exists

    - name: configure chrony
      template:
        src: templates/chrony/chrony.{{ ansible_facts.os_family }}.conf.j2
        dest: '{{ chrony_conf }}'
      notify: restart chrony

  handlers:
    - name: restart sssd
      systemd:
        name: sssd
        state: restarted
    - name: reload ssh
      systemd:
        name: '{{ ssh_service }}'
        state: reloaded
    - name: restart chrony
      systemd:
        name: '{{ chrony_service }}'
        state: restarted
