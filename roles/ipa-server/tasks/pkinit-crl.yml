# Important notes!
#
# 0. Only the KDC will perform CRL checking. The only known use of PKINIT by a
#    client on an IPA server is when ipaapi runs kinit to log in a user who
#    authenticates with a smart card. The client only ever talks to the local
#    KDC, so CRL checking is not vital in this case.
#
# 1. CRL data is read only once, when krb5kdc starts up.
#
# 2. If there's a problem that prevents CRL data being accessed, krb5kdc will
#    start up, but PKINIT will not work. It will log a message:
#
#    (Error): preauth pkinit failed to initialize: PKINIT initialization failed: Cannot open file '/var/kerberos/krb5kdc/crls//524d180b.r0': (null)
#
# 3. When attempting to use a revoked certificate, the client will see:
#
#    $ kinit -c MEMORY: -X X509_anchors=FILE:/etc/ipa/ca.crt -X X509_user_identity=FILE:/tmp/tls.crt,/tmp/tls.key host/myhost.example.com
#    kinit: Revoked certificate while getting initial credentials
#
#    and krb5kdc will log:
#
#    (info): preauth (pkinit) verify failure: Failed to verify received certificate (depth 0): certificate revoked
#    (info): AS_REQ (6 etypes {aes256-cts-hmac-sha384-192(20), aes128-cts-hmac-sha256-128(19), aes256-cts-hmac-sha1-96(18), aes128-cts-hmac-sha1-96(17), camellia256-cts-cmac(26), camellia128-cts-cmac(25)}) 192.168.89.4: PREAUTH_FAILED: host/ukhsa-idtest.ipa.robots.org.uk@IPA.ROBOTS.ORG.UK for krbtgt/IPA.ROBOTS.ORG.UK@IPA.ROBOTS.ORG.UK, Failed to verify received certificate (depth 0): certificate revoked
#
# 4. CRL data must be labelled such that krb5kdc_t can read it. Using etc_t
#    saves us from needing to define a custom type.
#
---
- name: configure default file system labelling for crl directory
  sefcontext:
    target: '/var/kerberos/krb5kdc/crl(/.*)?'
    setype: etc_t
    state: present

- name: create kdc crl directory
  file:
    path: /var/kerberos/krb5kdc/crl
    owner: root
    group: root
    mode: 0755
    state: directory 
    setype: _default

- name: configure KDC to check CRLs
  blockinfile:
    path: /var/kerberos/krb5kdc/kdc.conf
    marker: '# {mark} ANSIBLE MANAGED BLOCK (crl checking)'
    insertafter: '^\s*{{ ipa_server_domain | regex_escape }}\s*=\s*{\s*$'
    block: |
      pkinit_revoke = DIR:/var/kerberos/krb5kdc/crl
      pkinit_require_crl_checking = false
    state: present
  register: kdc_conf_crl_checking

- name: restart krb5kdc
  command: systemctl try-restart krb5kdc.service
  when: kdc_conf_crl_checking.changed

- name: create crl updated script
  copy:
    src: ipa-pki-crl-updated.py
    dest: /usr/local/libexec/ipa-pki-crl-updated
    owner: root
    group: root
    mode: 0755

- name: create crl updated systemd units
  copy:
    src: '{{ item }}'
    dest: /etc/systemd/system/
    owner: root
    group: root
    mode: 0644
  register: ipa_server_pkinit_crl_updated
  loop:
  - ipa-pki-crl-updated.path
  - ipa-pki-crl-updated.service

- name: create crl fetch script
  copy:
    src: ipa-pki-crl-fetch.py
    dest: /usr/local/libexec/ipa-pki-crl-fetch
    owner: root
    group: root
    mode: 0755
  register: ipa_server_pkinit_crl_fetch

- name: create crl fetch systemd units
  template:
    src: ipa-pki-crl-fetch.service.j2
    dest: /etc/systemd/system/ipa-pki-crl-fetch.service
    owner: root
    group: root
    mode: 0644
  register: ipa_server_pkinit_crl_fetch_service

- name: reload systemd units
  systemd:
    daemon_reload: true
  when: (ipa_server_pkinit_crl_updated.results | selectattr("changed")) or ipa_server_pkinit_crl_fetch_service

- name: enable & start crl updated path
  systemd_service:
    name: ipa-pki-crl-updated.path
    state: started
    enabled: true

- name: enable & (re)start crl fetch service
  systemd_service:
    name: ipa-pki-crl-fetch.service
    state: '{{ ipa_server_pkinit_crl_fetch.changed | ternary("restarted", "started") }}'
    enabled: true
...
